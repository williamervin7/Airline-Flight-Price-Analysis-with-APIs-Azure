# -*- coding: utf-8 -*-
"""data_collection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QZun8weUPNX8JdWFJ5swnYFzYLyOzeXk

# Flight Offers Data Collection Notebook

This notebook serves as the data collection pipeline for the **Airline Flight Price Analysis** project. Its purpose is to fetch raw flight offer data from the **Amadeus Flight Offers API** and save it for further analysis.

## Workflow Overview

1. **Connect to GitHub repository**  
   - Access `scripts.py` which contains the core functions:  
     - `get_access_token()` – retrieves a short-lived access token from Amadeus.  
     - `get_flights_over_range()` – fetches flight offers over a specified date range.

2. **Authenticate with Amadeus API**  
   - Credentials (API key and secret) are stored securely in Colab’s `userdata`.  
   - A token is generated using these credentials for all API requests.

3. **Fetch flight offers**  
   - Collect flight offers for a specified date range (e.g., 2025-10-15 to 2025-11-15).  
   - Data includes airline, flight number, departure/arrival airports and times, duration, and price.  
   - Each call captures the state of available offers on the day the API is called.

4. **Save and version data**  
   - Raw data is saved as a CSV file, timestamped with the pull date.  
   - Each CSV is pushed to the GitHub repository under `data/raw/` to maintain a historical record of API snapshots.

5. **Next steps**  
   - Daily runs will build a dataset capturing price fluctuations and offer dynamics.  
   - Collected data will be used for exploratory analysis and potential machine learning modeling, including price trends, carrier comparisons, and predictive modeling.
"""

# Commented out IPython magic to ensure Python compatibility.
# Go to the content folder
# %cd /content

# Remove old repo if it exists
!rm -rf Airline-Flight-Price-Analysis-with-APIs-Azure

# Clone the latest version of your repo
!git clone https://github.com/williamervin7/Airline-Flight-Price-Analysis-with-APIs-Azure.git

# Check contents
!ls Airline-Flight-Price-Analysis-with-APIs-Azure

"""# Ensure `scripts` is a Python Package

This cell prepares the `scripts` folder to be imported as a Python package by creating an `__init__.py` file if it does not already exist.  

- `repo_path` points to the local clone of the GitHub repository.  
- `scripts_folder` is the folder containing our Python functions (`scripts.py`).  
- Creating `__init__.py` allows us to import functions from `scripts.py` using standard Python import syntax.  

"""

import os
from datetime import datetime, timedelta

repo_path = "/content/Airline-Flight-Price-Analysis-with-APIs-Azure"
scripts_folder = os.path.join(repo_path, "scripts")

# Create __init__.py if it doesn't exist
init_file = os.path.join(scripts_folder, "__init__.py")
if not os.path.exists(init_file):
    open(init_file, "a").close()
    print("__init__.py created in scripts/")
else:
    print("__init__.py already exists")

"""# Import Functions from `scripts.py`

This cell ensures that the `scripts` folder is accessible as a Python package and imports the necessary functions for data collection.

- `sys.path.append(repo_path)` adds the repository folder to the Python path so we can import modules from it.  
- `!touch .../__init__.py` ensures the `scripts` folder is recognized as a package.  
- We then import the main functions from `scripts/scripts.py`:
  - `get_flights_for_day`
  - `get_access_token`
  - `get_flights_over_range`  

If the imports succeed, we print a confirmation message.

"""

import sys

sys.path.append(repo_path)
!touch /content/Airline-Flight-Price-Analysis-with-APIs-Azure/scripts/__init__.py

# Import the function from scripts/scripts.py
from scripts.scripts import get_flights_for_day, get_access_token, get_flights_over_range

print("Import successful!")

"""# Authenticate with the Amadeus API

This cell retrieves the API credentials and obtains an access token for making requests to the Amadeus Flight Offers API.  

- `API_KEY` and `API_SECRET` are securely retrieved from Google Colab's `userdata`.  
- `get_access_token()` uses these credentials to generate a short-lived token.  

A test call for a single day is included (commented out) to verify the setup:

```python
# df_day = get_flights_for_day(token, "IAH", "LAX", "2025-11-02")
# print(df_day.head())

"""

from google.colab import userdata
API_KEY = userdata.get('Amadeus_key')
API_SECRET = userdata.get('Amadeus')
token = get_access_token(API_KEY, API_SECRET)

# Test one day
#df_day = get_flights_for_day(token, "IAH", "LAX", "2025-10-05", max_results=5)
#print(df_day.head())

# Call get_flights_over_range function
df_offers = get_flights_over_range(token, "IAH", "LAX", "2025-10-15", "2025-11-15")
print(df_offers.shape)

"""# Save Flight Offers as CSV

This cell saves the collected flight offers to a CSV file with the current date in its filename.  

- `data_path` points to the `data/raw` folder in the repository.  
- `os.makedirs(..., exist_ok=True)` ensures the folder exists; it will create it if needed.  
- `search_date` captures the current date in `YYYY-MM-DD` format.  
- `file_path` combines the folder path and filename.  
- `df_offers.to_csv()` saves the DataFrame to the CSV file.  
- A confirmation message prints the path where the file was saved.

"""

# Filename with current date
data_path = os.path.join(repo_path, "data/raw")

# Make sure the folder exists
os.makedirs(data_path, exist_ok=True)

# File name with today's date
search_date = datetime.now().strftime('%Y-%m-%d')
file_path = os.path.join(data_path, f"{search_date}.csv")

# Save the CSV
df_offers.to_csv(file_path, index=False)
print(f"Saved CSV to {file_path}")

"""# Configure Git and Change Directory

This cell prepares the Colab environment to push files to your GitHub repository.  

- `%cd Airline-Flight-Price-Analysis-with-APIs-Azure` changes the working directory to the cloned repo.  
- `!git config --global user.email` and `!git config --global user.name` set your Git identity for commits from this environment.

"""

# Commented out IPython magic to ensure Python compatibility.
# CHANGE DIRECTORY into the cloned repository folder
# %cd Airline-Flight-Price-Analysis-with-APIs-Azure
!git config --global user.email "william7ervin@gmail.com"
!git config --global user.name "williamervin7"

"""# Configure GitHub Authentication

This cell sets up authentication to allow pushing changes to the GitHub repository from Colab.  

- `USERNAME` is your GitHub username.  
- `PAT` (Personal Access Token) is securely retrieved from Colab's `userdata`.  
- `!git remote set-url` updates the repository's remote URL to include my credentials, enabling authenticated pushes without manual login.

"""

# Define GitHub credentials
USERNAME = "williamervin7"
PAT = userdata.get('Git_token')

# Set the remote URL using my username and PAT
!git remote set-url origin https://$USERNAME:$PAT@github.com/williamervin7/Airline-Flight-Price-Analysis-with-APIs-Azure.git

"""# Stage and Commit CSV File to Git

This cell stages and commits the newly saved CSV file to the Git repository.  

1. **Add**: Uses an f-string to dynamically add the CSV file for today's date.  
2. **Commit**: Uses an f-string to create a commit message that includes the date of the data collection.

"""

# 1. Use f-string for ADD
add_command = f'git add data/raw/{search_date}.csv'
!{add_command}

# 2. Use f-string for COMMIT
commit_message = f'Add raw flight data for {search_date}'
!git commit -m "{commit_message}"

!git push origin main

!git status
!git log -1